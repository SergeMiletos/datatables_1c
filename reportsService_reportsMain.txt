Функция ШаблонURLtestserviceReplyToPOSTRequest(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);  
	ЗаписьЖурналаРегистрации("Вход в обработчик post http ",УровеньЖурналаРегистрации.Предупреждение,,ТекущаяДата());
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	
	res = ПрочитатьJSON(ЧтениеJSON);  
	ЗаписьЖурналаРегистрации("Вход в обработчик post http, разбор json ",УровеньЖурналаРегистрации.Предупреждение,,Запрос.ПолучитьТелоКакСтроку());
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Склад.Наименование КАК Stock,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Номенклатура.Наименование КАК Product,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор) КАК DocMover,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК quantOpeningBalance,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьНачальныйОстаток КАК ValueOpeningBalance,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоПриход КАК quantIncome,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьПриход КАК ValueIncome,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоРасход КАК quantOutcome,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьРасход КАК ValueOutcome,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК quantClosingBalance,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьКонечныйОстаток КАК ValueClosingBalance,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Организация.Наименование КАК Organisation,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Дата КАК DocMoverDate,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Номер КАК DocMoverNumber,
	               |	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор)) КАК DocMoverType,
	               |	СУММА(ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоОборот) КАК quantTurnover
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ) КАК ПартииТоваровНаСкладахОстаткиИОбороты
	               |ГДЕ
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоПриход,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоРасход,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Дата,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Номер,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьПриход,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьРасход,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьНачальныйОстаток,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьКонечныйОстаток,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Склад.Наименование,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Номенклатура.Наименование,
	               |	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Организация.Наименование,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор),
	               |	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор))
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоОборот) <> 0";
	
	//ТабРезЗапроса = Запрос.Выполнить().Выгрузить();
	ЗаписьЖурналаРегистрации("Дата в сервисе http ",УровеньЖурналаРегистрации.Предупреждение,,res.dateStart);
	Запрос.УстановитьПараметр("ДатаНач", Дата(res.dateStart));
	Запрос.УстановитьПараметр("ДатаКон", Дата(res.dateEnd));
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	МассивРезультатовЗапросов = Новый Массив();
	МассивОтчета = Новый Массив;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтрокаТаблицыОтчета = Новый Массив;		
		Для Каждого Кол Из ВыборкаЗапроса.Владелец().Колонки Цикл       
			Если ВыборкаЗапроса[Кол.Имя] <> Null Тогда
				Если ТипЗнч( ВыборкаЗапроса[Кол.Имя]) = Тип("Число") Тогда
					СтрокаКОбработке = Формат(ВыборкаЗапроса[Кол.Имя],"ЧДЦ=2; ЧРД=.; ЧГ=");
					СтрокаКОбработке = СтрЗаменить(СтрокаКОбработке,",","."); 
				Иначе
					СтрокаКОбработке = ВыборкаЗапроса[Кол.Имя];
				КонецЕсли;
				СтрокаКОбработке = СтрЗаменить(СтрокаКОбработке,"'"," ");
				СтрокаКОбработке = СтрЗаменить(СтрокаКОбработке,""""," ");
				СтрокаТаблицыОтчета.Добавить(СтрокаКОбработке);
			Иначе
				СтрокаТаблицыОтчета.Добавить("--");
			КонецЕсли;
		КонецЦикла;		
		//ЗаполнитьЗначенияСвойств(СтрокаТаблицыОтчета, ВыборкаЗапроса); 
		МассивОтчета.Добавить(СтрокаТаблицыОтчета);
	КонецЦикла;
	МассивРезультатовЗапросов.Добавить(МассивОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОбороты.Регистратор) КАК DocMover,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.Контрагент.Наименование ЕСТЬ NULL
	               |			ТОГДА "" - Не указано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.Контрагент.Наименование
	               |	КОНЕЦ КАК Partner,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Наименование ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Наименование
	               |	КОНЕЦ КАК ContractName,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Дата ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Дата
	               |	КОНЕЦ КАК ContractDate,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Номер ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.ДоговорКонтрагента.Номер
	               |	КОНЕЦ КАК ContractNumber,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.Ответственный ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.Ответственный.Наименование
	               |	КОНЕЦ КАК UserAuthor,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПартииТоваровНаСкладахОбороты.Регистратор.НомерВходящегоДокумента
	               |	КОНЕЦ КАК IncomeDocNumber,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.ТипЦен ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОбороты.Регистратор.ТипЦен)
	               |	КОНЕЦ КАК PriceType,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.СкладОтправитель ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОбороты.Регистратор.СкладОтправитель)
	               |	КОНЕЦ КАК StockSender,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахОбороты.Регистратор.СкладПолучатель ЕСТЬ NULL
	               |			ТОГДА "" - Не задано - ""
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ПартииТоваровНаСкладахОбороты.Регистратор.СкладПолучатель)
	               |	КОНЕЦ КАК StockAcceptor
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ПартииТоваровНаСкладахОбороты";

	Запрос.УстановитьПараметр("ДатаНач", Дата(res.dateStart));
	Запрос.УстановитьПараметр("ДатаКон", Дата(res.dateEnd));
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	МассивОтчета = Новый Массив;
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтрокаТаблицыОтчета = Новый Массив();		
		Для Каждого Кол Из ВыборкаЗапроса.Владелец().Колонки Цикл       
			Если ВыборкаЗапроса[Кол.Имя] <> Null Тогда
				СтрокаКОбработке = ВыборкаЗапроса[Кол.Имя];
				СтрокаКОбработке = СтрЗаменить(СтрокаКОбработке,"'"," ");
				СтрокаКОбработке = СтрЗаменить(СтрокаКОбработке,""""," ");
				СтрокаТаблицыОтчета.Добавить(СтрокаКОбработке);
			Иначе
				СтрокаТаблицыОтчета.добавить("--");
			КонецЕсли;
		КонецЦикла;
		МассивОтчета.Добавить(СтрокаТаблицыОтчета);
	КонецЦикла;
	МассивРезультатовЗапросов.Добавить(МассивОтчета);
	МассивРезультатовЗапросов.Добавить(Дата(res.dateStart));
	МассивРезультатовЗапросов.Добавить(Дата(res.dateEnd));
	
	
	params = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет); 
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(params);                                              
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивРезультатовЗапросов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

